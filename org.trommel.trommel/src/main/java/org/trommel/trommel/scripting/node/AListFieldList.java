/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.node;

import org.trommel.trommel.scripting.analysis.*;

@SuppressWarnings("nls")
public final class AListFieldList extends PFieldList
{
    private PFieldList _fieldList_;
    private TComma _comma_;
    private PField _field_;

    public AListFieldList()
    {
        // Constructor
    }

    public AListFieldList(
        @SuppressWarnings("hiding") PFieldList _fieldList_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PField _field_)
    {
        // Constructor
        setFieldList(_fieldList_);

        setComma(_comma_);

        setField(_field_);

    }

    @Override
    public Object clone()
    {
        return new AListFieldList(
            cloneNode(this._fieldList_),
            cloneNode(this._comma_),
            cloneNode(this._field_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListFieldList(this);
    }

    public PFieldList getFieldList()
    {
        return this._fieldList_;
    }

    public void setFieldList(PFieldList node)
    {
        if(this._fieldList_ != null)
        {
            this._fieldList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fieldList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PField getField()
    {
        return this._field_;
    }

    public void setField(PField node)
    {
        if(this._field_ != null)
        {
            this._field_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._field_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fieldList_)
            + toString(this._comma_)
            + toString(this._field_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fieldList_ == child)
        {
            this._fieldList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._field_ == child)
        {
            this._field_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fieldList_ == oldChild)
        {
            setFieldList((PFieldList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._field_ == oldChild)
        {
            setField((PField) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
