/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.node;

import org.trommel.trommel.scripting.analysis.*;

@SuppressWarnings("nls")
public final class AListFunctionList extends PFunctionList
{
    private PFunctionList _functionList_;
    private TComma _comma_;
    private PFunction _function_;

    public AListFunctionList()
    {
        // Constructor
    }

    public AListFunctionList(
         PFunctionList _functionList_,
         TComma _comma_,
         PFunction _function_)
    {
        // Constructor
        setFunctionList(_functionList_);

        setComma(_comma_);

        setFunction(_function_);

    }

    @Override
    public Object clone()
    {
        return new AListFunctionList(
            cloneNode(this._functionList_),
            cloneNode(this._comma_),
            cloneNode(this._function_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListFunctionList(this);
    }

    public PFunctionList getFunctionList()
    {
        return this._functionList_;
    }

    public void setFunctionList(PFunctionList node)
    {
        if(this._functionList_ != null)
        {
            this._functionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionList_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PFunction getFunction()
    {
        return this._function_;
    }

    public void setFunction(PFunction node)
    {
        if(this._function_ != null)
        {
            this._function_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._function_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._functionList_)
            + toString(this._comma_)
            + toString(this._function_);
    }

    @Override
    void removeChild( Node child)
    {
        // Remove child
        if(this._functionList_ == child)
        {
            this._functionList_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._function_ == child)
        {
            this._function_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild( Node oldChild,  Node newChild)
    {
        // Replace child
        if(this._functionList_ == oldChild)
        {
            setFunctionList((PFunctionList) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._function_ == oldChild)
        {
            setFunction((PFunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
