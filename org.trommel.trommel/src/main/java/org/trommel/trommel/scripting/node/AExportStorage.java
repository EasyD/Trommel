/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.node;

import org.trommel.trommel.scripting.analysis.*;

@SuppressWarnings("nls")
public final class AExportStorage extends PStorage
{
    private TExport _export_;
    private TTo _to_;
    private PLocalFilePath _localFilePath_;
    private TAs _as_;
    private PLocalFile _localFile_;

    public AExportStorage()
    {
        // Constructor
    }

    public AExportStorage(
        @SuppressWarnings("hiding") TExport _export_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PLocalFilePath _localFilePath_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") PLocalFile _localFile_)
    {
        // Constructor
        setExport(_export_);

        setTo(_to_);

        setLocalFilePath(_localFilePath_);

        setAs(_as_);

        setLocalFile(_localFile_);

    }

    @Override
    public Object clone()
    {
        return new AExportStorage(
            cloneNode(this._export_),
            cloneNode(this._to_),
            cloneNode(this._localFilePath_),
            cloneNode(this._as_),
            cloneNode(this._localFile_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExportStorage(this);
    }

    public TExport getExport()
    {
        return this._export_;
    }

    public void setExport(TExport node)
    {
        if(this._export_ != null)
        {
            this._export_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._export_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PLocalFilePath getLocalFilePath()
    {
        return this._localFilePath_;
    }

    public void setLocalFilePath(PLocalFilePath node)
    {
        if(this._localFilePath_ != null)
        {
            this._localFilePath_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._localFilePath_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public PLocalFile getLocalFile()
    {
        return this._localFile_;
    }

    public void setLocalFile(PLocalFile node)
    {
        if(this._localFile_ != null)
        {
            this._localFile_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._localFile_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._export_)
            + toString(this._to_)
            + toString(this._localFilePath_)
            + toString(this._as_)
            + toString(this._localFile_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._export_ == child)
        {
            this._export_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._localFilePath_ == child)
        {
            this._localFilePath_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._localFile_ == child)
        {
            this._localFile_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._export_ == oldChild)
        {
            setExport((TExport) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._localFilePath_ == oldChild)
        {
            setLocalFilePath((PLocalFilePath) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._localFile_ == oldChild)
        {
            setLocalFile((PLocalFile) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
