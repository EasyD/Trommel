/** This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.lexer;

import java.io.*;
import org.trommel.trommel.scripting.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer( PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

         int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
         int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                             Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                             Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                             Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                             Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                             Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                             Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                             Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                             Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                             Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                             Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                             Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                             Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                             Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                             Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                             Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                             Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                             Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                             Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                             Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                             Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                             Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                             Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                             Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                             Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                             Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                             Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                             Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                             Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                             Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                             Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                             Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                             Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                             Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                             Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                             Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                             Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                             Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                             Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                             Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                     EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0( String text,  int line,  int pos) { return new TLoad(text, line, pos); }
    Token new1( int line,  int pos) { return new TColon(line, pos); }
    Token new2( String text,  int line,  int pos) { return new TFieldType(text, line, pos); }
    Token new3( String text,  int line,  int pos) { return new TFields(text, line, pos); }
    Token new4( String text,  int line,  int pos) { return new TTerminated(text, line, pos); }
    Token new5( String text,  int line,  int pos) { return new TBy(text, line, pos); }
    Token new6( String text,  int line,  int pos) { return new TProfile(text, line, pos); }
    Token new7( String text,  int line,  int pos) { return new TWith(text, line, pos); }
    Token new8( String text,  int line,  int pos) { return new TAll(text, line, pos); }
    Token new9( String text,  int line,  int pos) { return new TBuiltin(text, line, pos); }
    Token new10( String text,  int line,  int pos) { return new TMax(text, line, pos); }
    Token new11( String text,  int line,  int pos) { return new TMin(text, line, pos); }
    Token new12( String text,  int line,  int pos) { return new TDistinct(text, line, pos); }
    Token new13( String text,  int line,  int pos) { return new TEmpty(text, line, pos); }
    Token new14( String text,  int line,  int pos) { return new TReq(text, line, pos); }
    Token new15( String text,  int line,  int pos) { return new TVar(text, line, pos); }
    Token new16( String text,  int line,  int pos) { return new TConf(text, line, pos); }
    Token new17( String text,  int line,  int pos) { return new TLin(text, line, pos); }
    Token new18( String text,  int line,  int pos) { return new TReport(text, line, pos); }
    Token new19( String text,  int line,  int pos) { return new TFor(text, line, pos); }
    Token new20( String text,  int line,  int pos) { return new TSample(text, line, pos); }
    Token new21( String text,  int line,  int pos) { return new TAt(text, line, pos); }
    Token new22( int line,  int pos) { return new TPercent(line, pos); }
    Token new23( String text,  int line,  int pos) { return new TData(text, line, pos); }
    Token new24( String text,  int line,  int pos) { return new TStore(text, line, pos); }
    Token new25( String text,  int line,  int pos) { return new TInto(text, line, pos); }
    Token new26( String text,  int line,  int pos) { return new TExport(text, line, pos); }
    Token new27( String text,  int line,  int pos) { return new TTo(text, line, pos); }
    Token new28( int line,  int pos) { return new TSemicolon(line, pos); }
    Token new29( int line,  int pos) { return new TLeftParen(line, pos); }
    Token new30( int line,  int pos) { return new TRightParen(line, pos); }
    Token new31( int line,  int pos) { return new TComma(line, pos); }
    Token new32( String text,  int line,  int pos) { return new TAs(text, line, pos); }
    Token new33( String text,  int line,  int pos) { return new TQuotedString(text, line, pos); }
    Token new34( String text,  int line,  int pos) { return new TIdentifier(text, line, pos); }
    Token new35( String text,  int line,  int pos) { return new TInteger(text, line, pos); }
    Token new36( String text,  int line,  int pos) { return new TBlockComment(text, line, pos); }
    Token new37( String text,  int line,  int pos) { return new TSingleLineComment(text, line, pos); }
    Token new38( String text,  int line,  int pos) { return new TWhiteSpace(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread( Token token) throws IOException
    {
         String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {37, 37, 6}, {39, 39, 7}, {40, 40, 8}, {41, 41, 9}, {44, 44, 10}, {47, 47, 11}, {48, 57, 12}, {58, 58, 13}, {59, 59, 14}, {65, 65, 15}, {66, 66, 16}, {67, 67, 17}, {68, 68, 18}, {69, 69, 19}, {70, 70, 20}, {71, 72, 21}, {73, 73, 22}, {74, 75, 21}, {76, 76, 23}, {77, 77, 24}, {78, 78, 25}, {79, 79, 21}, {80, 80, 26}, {81, 81, 21}, {82, 82, 27}, {83, 83, 28}, {84, 84, 29}, {85, 85, 21}, {86, 86, 30}, {87, 87, 31}, {88, 90, 21}, {97, 97, 32}, {98, 98, 33}, {99, 99, 34}, {100, 100, 35}, {101, 101, 36}, {102, 102, 37}, {103, 104, 21}, {105, 105, 38}, {106, 107, 21}, {108, 108, 39}, {109, 109, 40}, {110, 110, 41}, {111, 111, 21}, {112, 112, 42}, {113, 113, 21}, {114, 114, 43}, {115, 115, 44}, {116, 116, 45}, {117, 117, 21}, {118, 118, 46}, {119, 119, 47}, {120, 122, 21}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 48}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {{32, 38, 49}, {40, 126, 49}, },
            {},
            {},
            {},
            {{42, 42, 50}, {47, 47, 51}, },
            {{48, 57, 12}, },
            {},
            {},
            {{48, 57, 52}, {65, 75, 53}, {76, 76, 54}, {77, 82, 53}, {83, 83, 55}, {84, 84, 56}, {85, 90, 53}, {95, 95, 57}, {97, 122, 53}, },
            {{48, 57, 52}, {65, 84, 53}, {85, 85, 58}, {86, 88, 53}, {89, 89, 59}, {90, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 65, 60}, {66, 78, 53}, {79, 79, 61}, {80, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 65, 62}, {66, 72, 53}, {73, 73, 63}, {74, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 76, 53}, {77, 77, 64}, {78, 87, 53}, {88, 88, 65}, {89, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 72, 53}, {73, 73, 66}, {74, 78, 53}, {79, 79, 67}, {80, 122, -19}, },
            {{48, 57, 52}, {65, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 77, 53}, {78, 78, 68}, {79, 90, 53}, {95, 122, -17}, },
            {{48, 72, -22}, {73, 73, 69}, {74, 78, 53}, {79, 79, 70}, {80, 122, -19}, },
            {{48, 57, 52}, {65, 65, 71}, {66, 72, 53}, {73, 73, 72}, {74, 122, -20}, },
            {{48, 84, -18}, {85, 85, 73}, {86, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 81, 53}, {82, 82, 74}, {83, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 68, 53}, {69, 69, 75}, {70, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 65, 76}, {66, 83, 53}, {84, 84, 77}, {85, 122, -17}, },
            {{48, 68, -29}, {69, 69, 78}, {70, 78, 53}, {79, 79, 79}, {80, 122, -19}, },
            {{48, 57, 52}, {65, 65, 80}, {66, 90, 53}, {95, 122, -17}, },
            {{48, 72, -22}, {73, 73, 81}, {74, 122, -20}, },
            {{48, 95, -23}, {97, 107, 53}, {108, 108, 82}, {109, 114, 53}, {115, 115, 83}, {116, 116, 84}, {117, 122, 53}, },
            {{48, 95, -23}, {97, 116, 53}, {117, 117, 85}, {118, 120, 53}, {121, 121, 86}, {122, 122, 53}, },
            {{48, 95, -23}, {97, 97, 87}, {98, 110, 53}, {111, 111, 88}, {112, 122, 53}, },
            {{48, 95, -23}, {97, 97, 89}, {98, 104, 53}, {105, 105, 90}, {106, 122, 53}, },
            {{48, 95, -23}, {97, 108, 53}, {109, 109, 91}, {110, 119, 53}, {120, 120, 92}, {121, 122, 53}, },
            {{48, 95, -23}, {97, 104, 53}, {105, 105, 93}, {106, 110, 53}, {111, 111, 94}, {112, 122, 53}, },
            {{48, 95, -23}, {97, 109, 53}, {110, 110, 95}, {111, 122, 53}, },
            {{48, 104, -39}, {105, 105, 96}, {106, 110, 53}, {111, 111, 97}, {112, 122, 53}, },
            {{48, 95, -23}, {97, 97, 98}, {98, 104, 53}, {105, 105, 99}, {106, 122, 53}, },
            {{48, 116, -35}, {117, 117, 100}, {118, 122, 53}, },
            {{48, 95, -23}, {97, 113, 53}, {114, 114, 101}, {115, 122, 53}, },
            {{48, 95, -23}, {97, 100, 53}, {101, 101, 102}, {102, 122, 53}, },
            {{48, 95, -23}, {97, 97, 103}, {98, 115, 53}, {116, 116, 104}, {117, 122, 53}, },
            {{48, 100, -45}, {101, 101, 105}, {102, 110, 53}, {111, 111, 106}, {112, 122, 53}, },
            {{48, 95, -23}, {97, 97, 107}, {98, 122, 53}, },
            {{48, 104, -39}, {105, 105, 108}, {106, 122, 53}, },
            {{9, 32, -2}, },
            {{32, 38, 49}, {39, 39, 109}, {40, 126, 49}, },
            {{9, 9, 110}, {10, 10, 111}, {13, 13, 112}, {32, 41, 113}, {42, 42, 114}, {43, 126, 113}, },
            {{10, 10, 115}, {13, 13, 116}, {32, 126, 117}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 75, -17}, {76, 76, 118}, {77, 90, 53}, {95, 122, -17}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 72, -22}, {73, 73, 119}, {74, 122, -20}, },
            {{48, 122, -23}, },
            {{48, 57, 52}, {65, 83, 53}, {84, 84, 120}, {85, 122, -17}, },
            {{48, 77, -24}, {78, 78, 121}, {79, 122, -24}, },
            {{48, 83, -62}, {84, 84, 122}, {85, 122, -17}, },
            {{48, 57, 52}, {65, 82, 53}, {83, 83, 123}, {84, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 79, 53}, {80, 80, 124}, {81, 90, 53}, {95, 122, -17}, },
            {{48, 79, -66}, {80, 80, 125}, {81, 122, -66}, },
            {{48, 68, -29}, {69, 69, 126}, {70, 122, -29}, },
            {{48, 81, -28}, {82, 82, 127}, {83, 122, -28}, },
            {{48, 83, -62}, {84, 84, 128}, {85, 122, -17}, },
            {{48, 77, -24}, {78, 78, 129}, {79, 122, -24}, },
            {{48, 57, 52}, {65, 65, 130}, {66, 122, -32}, },
            {{48, 57, 52}, {65, 87, 53}, {88, 88, 131}, {89, 122, -21}, },
            {{48, 77, -24}, {78, 78, 132}, {79, 122, -24}, },
            {{48, 76, -21}, {77, 77, 133}, {78, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 78, 53}, {79, 79, 134}, {80, 122, -19}, },
            {{48, 79, -66}, {80, 80, 135}, {81, 81, 136}, {82, 90, 53}, {95, 122, -17}, },
            {{48, 76, -21}, {77, 77, 137}, {78, 122, -75}, },
            {{48, 78, -76}, {79, 79, 138}, {80, 122, -19}, },
            {{48, 81, -28}, {82, 82, 139}, {83, 122, -28}, },
            {{48, 122, -23}, },
            {{48, 81, -28}, {82, 82, 140}, {83, 122, -28}, },
            {{48, 83, -62}, {84, 84, 141}, {85, 122, -17}, },
            {{48, 107, -34}, {108, 108, 142}, {109, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 104, -39}, {105, 105, 143}, {106, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 115, 53}, {116, 116, 144}, {117, 122, 53}, },
            {{48, 109, -40}, {110, 110, 145}, {111, 122, 53}, },
            {{48, 115, -89}, {116, 116, 146}, {117, 122, 53}, },
            {{48, 95, -23}, {97, 114, 53}, {115, 115, 147}, {116, 122, 53}, },
            {{48, 95, -23}, {97, 111, 53}, {112, 112, 148}, {113, 122, 53}, },
            {{48, 111, -93}, {112, 112, 149}, {113, 122, 53}, },
            {{48, 100, -45}, {101, 101, 150}, {102, 122, 53}, },
            {{48, 113, -44}, {114, 114, 151}, {115, 122, 53}, },
            {{48, 115, -89}, {116, 116, 152}, {117, 122, 53}, },
            {{48, 109, -40}, {110, 110, 153}, {111, 122, 53}, },
            {{48, 95, -23}, {97, 97, 154}, {98, 122, 53}, },
            {{48, 95, -23}, {97, 119, 53}, {120, 120, 155}, {121, 122, 53}, },
            {{48, 109, -40}, {110, 110, 156}, {111, 122, 53}, },
            {{48, 108, -38}, {109, 109, 157}, {110, 122, 53}, },
            {{48, 95, -23}, {97, 110, 53}, {111, 111, 158}, {112, 122, 53}, },
            {{48, 111, -93}, {112, 112, 159}, {113, 113, 160}, {114, 122, 53}, },
            {{48, 108, -38}, {109, 109, 161}, {110, 122, 53}, },
            {{48, 110, -103}, {111, 111, 162}, {112, 122, 53}, },
            {{48, 113, -44}, {114, 114, 163}, {115, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 113, -44}, {114, 114, 164}, {115, 122, 53}, },
            {{48, 115, -89}, {116, 116, 165}, {117, 122, 53}, },
            {},
            {{9, 126, -52}, },
            {{9, 126, -52}, },
            {{9, 9, 110}, {10, 10, 166}, {13, 126, -52}, },
            {{9, 126, -52}, },
            {{9, 42, -52}, {43, 46, 113}, {47, 47, 167}, {48, 126, 113}, },
            {},
            {{10, 10, 168}, },
            {{10, 126, -53}, },
            {{48, 122, -23}, },
            {{48, 75, -17}, {76, 76, 169}, {77, 122, -56}, },
            {{48, 68, -29}, {69, 69, 170}, {70, 122, -29}, },
            {{48, 57, 52}, {65, 69, 53}, {70, 70, 171}, {71, 90, 53}, {95, 122, -17}, },
            {{48, 57, 52}, {65, 65, 172}, {66, 122, -32}, },
            {{48, 83, -62}, {84, 84, 173}, {85, 122, -17}, },
            {{48, 83, -62}, {84, 84, 174}, {85, 122, -17}, },
            {{48, 78, -76}, {79, 79, 175}, {80, 122, -19}, },
            {{48, 75, -17}, {76, 76, 176}, {77, 122, -56}, },
            {{48, 122, -23}, },
            {{48, 78, -76}, {79, 79, 177}, {80, 122, -19}, },
            {{48, 122, -23}, },
            {{48, 57, 52}, {65, 67, 53}, {68, 68, 178}, {69, 90, 53}, {95, 122, -17}, },
            {{40, 40, 179}, {48, 122, -23}, },
            {{40, 40, 180}, {48, 122, -23}, },
            {{48, 68, -29}, {69, 69, 181}, {70, 122, -29}, },
            {{48, 69, -123}, {70, 70, 182}, {71, 122, -123}, },
            {{48, 78, -76}, {79, 79, 183}, {80, 122, -19}, },
            {{40, 40, 184}, {48, 122, -23}, },
            {{48, 79, -66}, {80, 80, 185}, {81, 122, -66}, },
            {{48, 81, -28}, {82, 82, 186}, {83, 122, -28}, },
            {{48, 76, -21}, {77, 77, 187}, {78, 122, -75}, },
            {{40, 40, 188}, {48, 122, -23}, },
            {{48, 57, 52}, {65, 71, 53}, {72, 72, 189}, {73, 90, 53}, {95, 122, -17}, },
            {{48, 122, -23}, },
            {{48, 107, -34}, {108, 108, 190}, {109, 122, 53}, },
            {{48, 100, -45}, {101, 101, 191}, {102, 122, 53}, },
            {{48, 95, -23}, {97, 101, 53}, {102, 102, 192}, {103, 122, 53}, },
            {{48, 95, -23}, {97, 97, 193}, {98, 122, 53}, },
            {{48, 115, -89}, {116, 116, 194}, {117, 122, 53}, },
            {{48, 115, -89}, {116, 116, 195}, {117, 122, 53}, },
            {{48, 110, -103}, {111, 111, 196}, {112, 122, 53}, },
            {{48, 107, -34}, {108, 108, 197}, {109, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 110, -103}, {111, 111, 198}, {112, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 99, 53}, {100, 100, 199}, {101, 122, 53}, },
            {{40, 40, 200}, {48, 122, -23}, },
            {{40, 40, 201}, {48, 122, -23}, },
            {{48, 100, -45}, {101, 101, 202}, {102, 122, 53}, },
            {{48, 101, -147}, {102, 102, 203}, {103, 122, 53}, },
            {{48, 110, -103}, {111, 111, 204}, {112, 122, 53}, },
            {{40, 40, 205}, {48, 122, -23}, },
            {{48, 111, -93}, {112, 112, 206}, {113, 122, 53}, },
            {{48, 113, -44}, {114, 114, 207}, {115, 122, 53}, },
            {{48, 108, -38}, {109, 109, 208}, {110, 122, 53}, },
            {{40, 40, 209}, {48, 122, -23}, },
            {{48, 95, -23}, {97, 103, 53}, {104, 104, 210}, {105, 122, 53}, },
            {{9, 126, -52}, },
            {{9, 126, -52}, },
            {},
            {{48, 83, -62}, {84, 84, 211}, {85, 122, -17}, },
            {{48, 57, 52}, {65, 70, 53}, {71, 71, 212}, {72, 90, 53}, {95, 122, -17}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 72, -22}, {73, 73, 213}, {74, 122, -20}, },
            {{48, 57, 52}, {65, 88, 53}, {89, 89, 214}, {90, 122, -18}, },
            {{48, 81, -28}, {82, 82, 215}, {83, 122, -28}, },
            {{48, 67, -132}, {68, 68, 216}, {69, 122, -132}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{41, 41, 217}, },
            {{41, 41, 218}, },
            {{48, 81, -28}, {82, 82, 219}, {83, 122, -28}, },
            {{48, 72, -22}, {73, 73, 220}, {74, 122, -20}, },
            {{48, 81, -28}, {82, 82, 221}, {83, 122, -28}, },
            {{41, 41, 222}, },
            {{48, 75, -17}, {76, 76, 223}, {77, 122, -56}, },
            {{48, 68, -29}, {69, 69, 224}, {70, 122, -29}, },
            {{48, 72, -22}, {73, 73, 225}, {74, 122, -20}, },
            {{41, 41, 226}, },
            {{48, 122, -23}, },
            {{48, 115, -89}, {116, 116, 227}, {117, 122, 53}, },
            {{48, 95, -23}, {97, 102, 53}, {103, 103, 228}, {104, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 104, -39}, {105, 105, 229}, {106, 122, 53}, },
            {{48, 95, -23}, {97, 120, 53}, {121, 121, 230}, {122, 122, 53}, },
            {{48, 113, -44}, {114, 114, 231}, {115, 122, 53}, },
            {{48, 99, -156}, {100, 100, 232}, {101, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{41, 41, 233}, },
            {{41, 41, 234}, },
            {{48, 113, -44}, {114, 114, 235}, {115, 122, 53}, },
            {{48, 104, -39}, {105, 105, 236}, {106, 122, 53}, },
            {{48, 113, -44}, {114, 114, 237}, {115, 122, 53}, },
            {{41, 41, 238}, },
            {{48, 107, -34}, {108, 108, 239}, {109, 122, 53}, },
            {{48, 100, -45}, {101, 101, 240}, {102, 122, 53}, },
            {{48, 104, -39}, {105, 105, 241}, {106, 122, 53}, },
            {{41, 41, 242}, },
            {{48, 122, -23}, },
            {{48, 72, -22}, {73, 73, 243}, {74, 122, -20}, },
            {{48, 78, -76}, {79, 79, 244}, {80, 122, -19}, },
            {{48, 77, -24}, {78, 78, 245}, {79, 122, -24}, },
            {{40, 40, 246}, {48, 122, -23}, },
            {{48, 83, -62}, {84, 84, 247}, {85, 122, -17}, },
            {{48, 82, -65}, {83, 83, 248}, {84, 122, -65}, },
            {},
            {},
            {{48, 72, -22}, {73, 73, 249}, {74, 122, -20}, },
            {{48, 75, -17}, {76, 76, 250}, {77, 122, -56}, },
            {{48, 83, -62}, {84, 84, 251}, {85, 122, -17}, },
            {},
            {{48, 68, -29}, {69, 69, 252}, {70, 122, -29}, },
            {{48, 122, -23}, },
            {{48, 77, -24}, {78, 78, 253}, {79, 122, -24}, },
            {},
            {{48, 104, -39}, {105, 105, 254}, {106, 122, 53}, },
            {{48, 110, -103}, {111, 111, 255}, {112, 122, 53}, },
            {{48, 109, -40}, {110, 110, 256}, {111, 122, 53}, },
            {{40, 40, 257}, {48, 122, -23}, },
            {{48, 115, -89}, {116, 116, 258}, {117, 122, 53}, },
            {{48, 114, -92}, {115, 115, 259}, {116, 122, 53}, },
            {},
            {},
            {{48, 104, -39}, {105, 105, 260}, {106, 122, 53}, },
            {{48, 107, -34}, {108, 108, 261}, {109, 122, 53}, },
            {{48, 115, -89}, {116, 116, 262}, {117, 122, 53}, },
            {},
            {{48, 100, -45}, {101, 101, 263}, {102, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 109, -40}, {110, 110, 264}, {111, 122, 53}, },
            {},
            {{48, 77, -24}, {78, 78, 265}, {79, 122, -24}, },
            {{48, 81, -28}, {82, 82, 266}, {83, 122, -28}, },
            {{48, 57, 52}, {65, 66, 53}, {67, 67, 267}, {68, 90, 53}, {95, 122, -17}, },
            {{41, 41, 268}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 66, -247}, {67, 67, 269}, {68, 122, -247}, },
            {{48, 68, -29}, {69, 69, 270}, {70, 122, -29}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 57, 52}, {65, 65, 271}, {66, 122, -32}, },
            {{48, 109, -40}, {110, 110, 272}, {111, 122, 53}, },
            {{48, 113, -44}, {114, 114, 273}, {115, 122, 53}, },
            {{48, 95, -23}, {97, 98, 53}, {99, 99, 274}, {100, 122, 53}, },
            {{41, 41, 275}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 98, -258}, {99, 99, 276}, {100, 122, 53}, },
            {{48, 100, -45}, {101, 101, 277}, {102, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 95, -23}, {97, 97, 278}, {98, 122, 53}, },
            {{48, 122, -23}, },
            {{48, 72, -22}, {73, 73, 279}, {74, 122, -20}, },
            {{48, 83, -62}, {84, 84, 280}, {85, 122, -17}, },
            {},
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 83, -62}, {84, 84, 281}, {85, 122, -17}, },
            {{48, 122, -23}, },
            {{48, 104, -39}, {105, 105, 282}, {106, 122, 53}, },
            {{48, 115, -89}, {116, 116, 283}, {117, 122, 53}, },
            {},
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 115, -89}, {116, 116, 284}, {117, 122, 53}, },
            {{48, 66, -247}, {67, 67, 285}, {68, 122, -247}, },
            {{40, 40, 286}, {48, 122, -23}, },
            {{48, 68, -29}, {69, 69, 287}, {70, 122, -29}, },
            {{48, 98, -258}, {99, 99, 288}, {100, 122, 53}, },
            {{40, 40, 289}, {48, 122, -23}, },
            {{48, 100, -45}, {101, 101, 290}, {102, 122, 53}, },
            {{48, 57, 52}, {65, 65, 291}, {66, 122, -32}, },
            {{41, 41, 292}, },
            {{48, 67, -132}, {68, 68, 293}, {69, 122, -132}, },
            {{48, 95, -23}, {97, 97, 294}, {98, 122, 53}, },
            {{41, 41, 295}, },
            {{48, 99, -156}, {100, 100, 296}, {101, 122, 53}, },
            {{48, 75, -17}, {76, 76, 297}, {77, 122, -56}, },
            {},
            {{48, 122, -23}, },
            {{48, 107, -34}, {108, 108, 298}, {109, 122, 53}, },
            {},
            {{48, 122, -23}, },
            {{48, 122, -23}, },
            {{48, 122, -23}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {38, 38, 38, 38, 38, 38, 22, -1, 29, 30, 31, -1, 35, 1, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 38, -1, -1, 37, 34, 34, 34, 32, 21, 34, 34, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 27, 34, 34, 34, 32, 21, 34, 5, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 27, 34, 34, 33, -1, -1, -1, -1, -1, 37, 37, 37, 8, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 17, 34, 10, 11, 34, 34, 34, 14, 34, 34, 34, 15, 34, 8, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 17, 34, 10, 11, 34, 34, 34, 14, 34, 34, 34, 15, 34, -1, 36, 37, 34, 34, 16, 23, 34, 34, 34, 34, 25, 0, -1, -1, 34, 34, 34, -1, 34, 34, 34, -1, 7, 34, 34, 16, 23, 34, 34, 34, 34, 25, 0, -1, -1, 34, 34, 34, -1, 34, 34, 34, -1, 7, 34, 34, 34, 13, 34, 34, 10, 11, 34, 34, 34, 14, 34, 24, 34, 15, 34, 34, 34, 13, 34, 34, 10, 11, 34, 34, 34, 14, 34, 24, 34, 15, 34, 34, 34, -1, 26, 3, 34, 34, 18, 20, 34, 34, 34, 34, -1, 26, 3, 34, 34, 18, 20, 34, 9, 34, 34, 13, 2, 6, 34, 9, 34, 34, 13, 2, 6, 34, 34, 12, 34, 34, 12, 34, 34, -1, 34, 34, -1, 34, 34, 12, 4, 34, 12, 4, 2, 2, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State( int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
