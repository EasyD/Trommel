/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.lexer;

import java.io.*;
import org.trommel.trommel.scripting.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLoad(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TData(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFieldType(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFields(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTerminated(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBy(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProfile(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWith(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAll(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBuiltin(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMax(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMin(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDistinct(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEmpty(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReq(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TConf(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLin(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStore(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInto(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExport(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTo(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLeftParen(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRightParen(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAs(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuotedString(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlockComment(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSingleLineComment(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {39, 39, 6}, {40, 40, 7}, {41, 41, 8}, {44, 44, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {65, 65, 14}, {66, 66, 15}, {67, 67, 16}, {68, 68, 17}, {69, 69, 18}, {70, 70, 19}, {71, 72, 20}, {73, 73, 21}, {74, 75, 20}, {76, 76, 22}, {77, 77, 23}, {78, 78, 24}, {79, 79, 20}, {80, 80, 25}, {81, 81, 20}, {82, 82, 26}, {83, 83, 27}, {84, 84, 28}, {85, 85, 20}, {86, 86, 29}, {87, 87, 30}, {88, 90, 20}, {97, 97, 31}, {98, 98, 32}, {99, 99, 33}, {100, 100, 34}, {101, 101, 35}, {102, 102, 36}, {103, 104, 20}, {105, 105, 37}, {106, 107, 20}, {108, 108, 38}, {109, 109, 39}, {110, 110, 40}, {111, 111, 20}, {112, 112, 41}, {113, 113, 20}, {114, 114, 42}, {115, 115, 43}, {116, 116, 44}, {117, 117, 20}, {118, 118, 45}, {119, 119, 46}, {120, 122, 20}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 47}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{32, 38, 48}, {40, 126, 48}, },
            {},
            {},
            {},
            {{42, 42, 49}, {47, 47, 50}, },
            {{48, 57, 11}, },
            {},
            {},
            {{48, 57, 51}, {65, 75, 52}, {76, 76, 53}, {77, 82, 52}, {83, 83, 54}, {84, 90, 52}, {95, 95, 55}, {97, 122, 52}, },
            {{48, 57, 51}, {65, 84, 52}, {85, 85, 56}, {86, 88, 52}, {89, 89, 57}, {90, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 65, 58}, {66, 78, 52}, {79, 79, 59}, {80, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 65, 60}, {66, 72, 52}, {73, 73, 61}, {74, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 76, 52}, {77, 77, 62}, {78, 87, 52}, {88, 88, 63}, {89, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 72, 52}, {73, 73, 64}, {74, 122, -19}, },
            {{48, 57, 51}, {65, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 77, 52}, {78, 78, 65}, {79, 90, 52}, {95, 122, -16}, },
            {{48, 72, -21}, {73, 73, 66}, {74, 78, 52}, {79, 79, 67}, {80, 122, -18}, },
            {{48, 57, 51}, {65, 65, 68}, {66, 72, 52}, {73, 73, 69}, {74, 122, -19}, },
            {{48, 84, -17}, {85, 85, 70}, {86, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 81, 52}, {82, 82, 71}, {83, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 68, 52}, {69, 69, 72}, {70, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 83, 52}, {84, 84, 73}, {85, 90, 52}, {95, 122, -16}, },
            {{48, 68, -28}, {69, 69, 74}, {70, 78, 52}, {79, 79, 75}, {80, 122, -18}, },
            {{48, 57, 51}, {65, 65, 76}, {66, 90, 52}, {95, 122, -16}, },
            {{48, 72, -21}, {73, 73, 77}, {74, 122, -19}, },
            {{48, 95, -22}, {97, 107, 52}, {108, 108, 78}, {109, 114, 52}, {115, 115, 79}, {116, 122, 52}, },
            {{48, 95, -22}, {97, 116, 52}, {117, 117, 80}, {118, 120, 52}, {121, 121, 81}, {122, 122, 52}, },
            {{48, 95, -22}, {97, 97, 82}, {98, 110, 52}, {111, 111, 83}, {112, 122, 52}, },
            {{48, 95, -22}, {97, 97, 84}, {98, 104, 52}, {105, 105, 85}, {106, 122, 52}, },
            {{48, 95, -22}, {97, 108, 52}, {109, 109, 86}, {110, 119, 52}, {120, 120, 87}, {121, 122, 52}, },
            {{48, 95, -22}, {97, 104, 52}, {105, 105, 88}, {106, 122, 52}, },
            {{48, 95, -22}, {97, 109, 52}, {110, 110, 89}, {111, 122, 52}, },
            {{48, 104, -38}, {105, 105, 90}, {106, 110, 52}, {111, 111, 91}, {112, 122, 52}, },
            {{48, 95, -22}, {97, 97, 92}, {98, 104, 52}, {105, 105, 93}, {106, 122, 52}, },
            {{48, 116, -34}, {117, 117, 94}, {118, 122, 52}, },
            {{48, 95, -22}, {97, 113, 52}, {114, 114, 95}, {115, 122, 52}, },
            {{48, 95, -22}, {97, 100, 52}, {101, 101, 96}, {102, 122, 52}, },
            {{48, 95, -22}, {97, 115, 52}, {116, 116, 97}, {117, 122, 52}, },
            {{48, 100, -44}, {101, 101, 98}, {102, 110, 52}, {111, 111, 99}, {112, 122, 52}, },
            {{48, 95, -22}, {97, 97, 100}, {98, 122, 52}, },
            {{48, 104, -38}, {105, 105, 101}, {106, 122, 52}, },
            {{9, 32, -2}, },
            {{32, 38, 48}, {39, 39, 102}, {40, 126, 48}, },
            {{9, 9, 103}, {10, 10, 104}, {13, 13, 105}, {32, 41, 106}, {42, 42, 107}, {43, 126, 106}, },
            {{10, 10, 108}, {13, 13, 109}, {32, 126, 110}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 75, -16}, {76, 76, 111}, {77, 90, 52}, {95, 122, -16}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 72, -21}, {73, 73, 112}, {74, 122, -19}, },
            {{48, 122, -22}, },
            {{48, 83, -29}, {84, 84, 113}, {85, 122, -29}, },
            {{48, 77, -23}, {78, 78, 114}, {79, 122, -23}, },
            {{48, 83, -29}, {84, 84, 115}, {85, 122, -29}, },
            {{48, 57, 51}, {65, 82, 52}, {83, 83, 116}, {84, 122, -16}, },
            {{48, 57, 51}, {65, 79, 52}, {80, 80, 117}, {81, 90, 52}, {95, 122, -16}, },
            {{48, 79, -64}, {80, 80, 118}, {81, 122, -64}, },
            {{48, 68, -28}, {69, 69, 119}, {70, 122, -28}, },
            {{48, 83, -29}, {84, 84, 120}, {85, 122, -29}, },
            {{48, 77, -23}, {78, 78, 121}, {79, 122, -23}, },
            {{48, 57, 51}, {65, 65, 122}, {66, 122, -31}, },
            {{48, 57, 51}, {65, 87, 52}, {88, 88, 123}, {89, 122, -20}, },
            {{48, 77, -23}, {78, 78, 124}, {79, 122, -23}, },
            {{48, 76, -20}, {77, 77, 125}, {78, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 78, 52}, {79, 79, 126}, {80, 122, -18}, },
            {{48, 57, 51}, {65, 80, 52}, {81, 81, 127}, {82, 90, 52}, {95, 122, -16}, },
            {{48, 78, -73}, {79, 79, 128}, {80, 122, -18}, },
            {{48, 81, -27}, {82, 82, 129}, {83, 122, -27}, },
            {{48, 122, -22}, },
            {{48, 81, -27}, {82, 82, 130}, {83, 122, -27}, },
            {{48, 83, -29}, {84, 84, 131}, {85, 122, -29}, },
            {{48, 107, -33}, {108, 108, 132}, {109, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 104, -38}, {105, 105, 133}, {106, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 115, -45}, {116, 116, 134}, {117, 122, 52}, },
            {{48, 109, -39}, {110, 110, 135}, {111, 122, 52}, },
            {{48, 115, -45}, {116, 116, 136}, {117, 122, 52}, },
            {{48, 95, -22}, {97, 114, 52}, {115, 115, 137}, {116, 122, 52}, },
            {{48, 95, -22}, {97, 111, 52}, {112, 112, 138}, {113, 122, 52}, },
            {{48, 111, -88}, {112, 112, 139}, {113, 122, 52}, },
            {{48, 100, -44}, {101, 101, 140}, {102, 122, 52}, },
            {{48, 115, -45}, {116, 116, 141}, {117, 122, 52}, },
            {{48, 109, -39}, {110, 110, 142}, {111, 122, 52}, },
            {{48, 95, -22}, {97, 97, 143}, {98, 122, 52}, },
            {{48, 95, -22}, {97, 119, 52}, {120, 120, 144}, {121, 122, 52}, },
            {{48, 109, -39}, {110, 110, 145}, {111, 122, 52}, },
            {{48, 108, -37}, {109, 109, 146}, {110, 122, 52}, },
            {{48, 95, -22}, {97, 110, 52}, {111, 111, 147}, {112, 122, 52}, },
            {{48, 95, -22}, {97, 112, 52}, {113, 113, 148}, {114, 122, 52}, },
            {{48, 110, -97}, {111, 111, 149}, {112, 122, 52}, },
            {{48, 113, -43}, {114, 114, 150}, {115, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 113, -43}, {114, 114, 151}, {115, 122, 52}, },
            {{48, 115, -45}, {116, 116, 152}, {117, 122, 52}, },
            {},
            {{9, 126, -51}, },
            {{9, 126, -51}, },
            {{9, 9, 103}, {10, 10, 153}, {13, 126, -51}, },
            {{9, 126, -51}, },
            {{9, 42, -51}, {43, 46, 106}, {47, 47, 154}, {48, 126, 106}, },
            {},
            {{10, 10, 155}, },
            {{10, 126, -52}, },
            {{48, 122, -22}, },
            {{48, 75, -16}, {76, 76, 156}, {77, 122, -55}, },
            {{48, 68, -28}, {69, 69, 157}, {70, 122, -28}, },
            {{48, 57, 51}, {65, 69, 52}, {70, 70, 158}, {71, 90, 52}, {95, 122, -16}, },
            {{48, 57, 51}, {65, 65, 159}, {66, 122, -31}, },
            {{48, 83, -29}, {84, 84, 160}, {85, 122, -29}, },
            {{48, 83, -29}, {84, 84, 161}, {85, 122, -29}, },
            {{48, 78, -73}, {79, 79, 162}, {80, 122, -18}, },
            {{48, 75, -16}, {76, 76, 163}, {77, 122, -55}, },
            {{48, 78, -73}, {79, 79, 164}, {80, 122, -18}, },
            {{48, 122, -22}, },
            {{48, 57, 51}, {65, 67, 52}, {68, 68, 165}, {69, 90, 52}, {95, 122, -16}, },
            {{40, 40, 166}, {48, 122, -22}, },
            {{40, 40, 167}, {48, 122, -22}, },
            {{48, 68, -28}, {69, 69, 168}, {70, 122, -28}, },
            {{48, 69, -116}, {70, 70, 169}, {71, 122, -116}, },
            {{40, 40, 170}, {48, 122, -22}, },
            {{48, 81, -27}, {82, 82, 171}, {83, 122, -27}, },
            {{48, 76, -20}, {77, 77, 172}, {78, 122, -72}, },
            {{40, 40, 173}, {48, 122, -22}, },
            {{48, 57, 51}, {65, 71, 52}, {72, 72, 174}, {73, 90, 52}, {95, 122, -16}, },
            {{48, 122, -22}, },
            {{48, 107, -33}, {108, 108, 175}, {109, 122, 52}, },
            {{48, 100, -44}, {101, 101, 176}, {102, 122, 52}, },
            {{48, 95, -22}, {97, 101, 52}, {102, 102, 177}, {103, 122, 52}, },
            {{48, 95, -22}, {97, 97, 178}, {98, 122, 52}, },
            {{48, 115, -45}, {116, 116, 179}, {117, 122, 52}, },
            {{48, 115, -45}, {116, 116, 180}, {117, 122, 52}, },
            {{48, 110, -97}, {111, 111, 181}, {112, 122, 52}, },
            {{48, 107, -33}, {108, 108, 182}, {109, 122, 52}, },
            {{48, 110, -97}, {111, 111, 183}, {112, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 95, -22}, {97, 99, 52}, {100, 100, 184}, {101, 122, 52}, },
            {{40, 40, 185}, {48, 122, -22}, },
            {{40, 40, 186}, {48, 122, -22}, },
            {{48, 100, -44}, {101, 101, 187}, {102, 122, 52}, },
            {{48, 101, -137}, {102, 102, 188}, {103, 122, 52}, },
            {{40, 40, 189}, {48, 122, -22}, },
            {{48, 113, -43}, {114, 114, 190}, {115, 122, 52}, },
            {{48, 108, -37}, {109, 109, 191}, {110, 122, 52}, },
            {{40, 40, 192}, {48, 122, -22}, },
            {{48, 95, -22}, {97, 103, 52}, {104, 104, 193}, {105, 122, 52}, },
            {{9, 126, -51}, },
            {{9, 126, -51}, },
            {},
            {{48, 83, -29}, {84, 84, 194}, {85, 122, -29}, },
            {{48, 57, 51}, {65, 70, 52}, {71, 71, 195}, {72, 90, 52}, {95, 122, -16}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 72, -21}, {73, 73, 196}, {74, 122, -19}, },
            {{48, 57, 51}, {65, 88, 52}, {89, 89, 197}, {90, 122, -17}, },
            {{48, 81, -27}, {82, 82, 198}, {83, 122, -27}, },
            {{48, 67, -124}, {68, 68, 199}, {69, 122, -124}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{41, 41, 200}, },
            {{41, 41, 201}, },
            {{48, 81, -27}, {82, 82, 202}, {83, 122, -27}, },
            {{48, 72, -21}, {73, 73, 203}, {74, 122, -19}, },
            {{41, 41, 204}, },
            {{48, 68, -28}, {69, 69, 205}, {70, 122, -28}, },
            {{48, 72, -21}, {73, 73, 206}, {74, 122, -19}, },
            {{41, 41, 207}, },
            {{48, 122, -22}, },
            {{48, 115, -45}, {116, 116, 208}, {117, 122, 52}, },
            {{48, 95, -22}, {97, 102, 52}, {103, 103, 209}, {104, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 104, -38}, {105, 105, 210}, {106, 122, 52}, },
            {{48, 95, -22}, {97, 120, 52}, {121, 121, 211}, {122, 122, 52}, },
            {{48, 113, -43}, {114, 114, 212}, {115, 122, 52}, },
            {{48, 99, -145}, {100, 100, 213}, {101, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{41, 41, 214}, },
            {{41, 41, 215}, },
            {{48, 113, -43}, {114, 114, 216}, {115, 122, 52}, },
            {{48, 104, -38}, {105, 105, 217}, {106, 122, 52}, },
            {{41, 41, 218}, },
            {{48, 100, -44}, {101, 101, 219}, {102, 122, 52}, },
            {{48, 104, -38}, {105, 105, 220}, {106, 122, 52}, },
            {{41, 41, 221}, },
            {{48, 122, -22}, },
            {{48, 72, -21}, {73, 73, 222}, {74, 122, -19}, },
            {{48, 78, -73}, {79, 79, 223}, {80, 122, -18}, },
            {{48, 77, -23}, {78, 78, 224}, {79, 122, -23}, },
            {{40, 40, 225}, {48, 122, -22}, },
            {{48, 83, -29}, {84, 84, 226}, {85, 122, -29}, },
            {{48, 82, -63}, {83, 83, 227}, {84, 122, -16}, },
            {},
            {},
            {{48, 72, -21}, {73, 73, 228}, {74, 122, -19}, },
            {{48, 75, -16}, {76, 76, 229}, {77, 122, -55}, },
            {},
            {{48, 122, -22}, },
            {{48, 77, -23}, {78, 78, 230}, {79, 122, -23}, },
            {},
            {{48, 104, -38}, {105, 105, 231}, {106, 122, 52}, },
            {{48, 110, -97}, {111, 111, 232}, {112, 122, 52}, },
            {{48, 109, -39}, {110, 110, 233}, {111, 122, 52}, },
            {{40, 40, 234}, {48, 122, -22}, },
            {{48, 115, -45}, {116, 116, 235}, {117, 122, 52}, },
            {{48, 114, -87}, {115, 115, 236}, {116, 122, 52}, },
            {},
            {},
            {{48, 104, -38}, {105, 105, 237}, {106, 122, 52}, },
            {{48, 107, -33}, {108, 108, 238}, {109, 122, 52}, },
            {},
            {{48, 122, -22}, },
            {{48, 109, -39}, {110, 110, 239}, {111, 122, 52}, },
            {},
            {{48, 77, -23}, {78, 78, 240}, {79, 122, -23}, },
            {{48, 81, -27}, {82, 82, 241}, {83, 122, -27}, },
            {{48, 57, 51}, {65, 66, 52}, {67, 67, 242}, {68, 90, 52}, {95, 122, -16}, },
            {{41, 41, 243}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 66, -226}, {67, 67, 244}, {68, 122, -226}, },
            {{48, 68, -28}, {69, 69, 245}, {70, 122, -28}, },
            {{48, 57, 51}, {65, 65, 246}, {66, 122, -31}, },
            {{48, 109, -39}, {110, 110, 247}, {111, 122, 52}, },
            {{48, 113, -43}, {114, 114, 248}, {115, 122, 52}, },
            {{48, 95, -22}, {97, 98, 52}, {99, 99, 249}, {100, 122, 52}, },
            {{41, 41, 250}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 98, -235}, {99, 99, 251}, {100, 122, 52}, },
            {{48, 100, -44}, {101, 101, 252}, {102, 122, 52}, },
            {{48, 95, -22}, {97, 97, 253}, {98, 122, 52}, },
            {{48, 122, -22}, },
            {{48, 72, -21}, {73, 73, 254}, {74, 122, -19}, },
            {{48, 83, -29}, {84, 84, 255}, {85, 122, -29}, },
            {},
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 83, -29}, {84, 84, 256}, {85, 122, -29}, },
            {{48, 122, -22}, },
            {{48, 104, -38}, {105, 105, 257}, {106, 122, 52}, },
            {{48, 115, -45}, {116, 116, 258}, {117, 122, 52}, },
            {},
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 115, -45}, {116, 116, 259}, {117, 122, 52}, },
            {{48, 66, -226}, {67, 67, 260}, {68, 122, -226}, },
            {{40, 40, 261}, {48, 122, -22}, },
            {{48, 68, -28}, {69, 69, 262}, {70, 122, -28}, },
            {{48, 98, -235}, {99, 99, 263}, {100, 122, 52}, },
            {{40, 40, 264}, {48, 122, -22}, },
            {{48, 100, -44}, {101, 101, 265}, {102, 122, 52}, },
            {{48, 57, 51}, {65, 65, 266}, {66, 122, -31}, },
            {{41, 41, 267}, },
            {{48, 67, -124}, {68, 68, 268}, {69, 122, -124}, },
            {{48, 95, -22}, {97, 97, 269}, {98, 122, 52}, },
            {{41, 41, 270}, },
            {{48, 99, -145}, {100, 100, 271}, {101, 122, 52}, },
            {{48, 75, -16}, {76, 76, 272}, {77, 122, -55}, },
            {},
            {{48, 122, -22}, },
            {{48, 107, -33}, {108, 108, 273}, {109, 122, 52}, },
            {},
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {33, 33, 33, 33, 33, 33, -1, 24, 25, 26, -1, 30, 2, 23, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 33, -1, -1, 32, 29, 29, 29, 27, 29, 29, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22, 29, 29, 29, 27, 29, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22, 29, 29, 28, -1, -1, -1, -1, -1, 32, 32, 32, 9, 29, 29, 29, 29, 29, 29, 29, 29, 29, 18, 29, 11, 12, 29, 29, 15, 29, 29, 16, 29, 9, 29, 29, 29, 29, 29, 29, 29, 29, 29, 18, 29, 11, 12, 29, 29, 15, 29, 29, 16, 29, -1, 31, 32, 29, 29, 17, 1, 29, 29, 29, 29, 20, 0, -1, -1, 29, 29, -1, 29, 29, -1, 8, 29, 29, 17, 1, 29, 29, 29, 29, 20, 0, -1, -1, 29, 29, -1, 29, 29, -1, 8, 29, 29, 29, 14, 29, 29, 11, 12, 29, 29, 15, 19, 29, 16, 29, 29, 29, 14, 29, 29, 11, 12, 29, 29, 15, 19, 29, 16, 29, 29, 29, -1, 21, 4, 29, 29, 29, 29, 29, 29, -1, 21, 4, 29, 29, 29, 10, 29, 29, 14, 3, 7, 29, 10, 29, 29, 14, 3, 7, 29, 29, 13, 29, 29, 13, 29, 29, -1, 29, 29, -1, 29, 29, 13, 5, 29, 13, 5, 3, 3, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
