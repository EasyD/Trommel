/** This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.analysis;

import org.trommel.trommel.scripting.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProfileDataTrommelScript(AProfileDataTrommelScript node);
    void caseAReportDataTrommelScript(AReportDataTrommelScript node);
    void caseASampleDataTrommelScript(ASampleDataTrommelScript node);
    void caseALoadDataStatement(ALoadDataStatement node);
    void caseALoadedFile(ALoadedFile node);
    void caseALoadedFields(ALoadedFields node);
    void caseASingleFieldList(ASingleFieldList node);
    void caseAListFieldList(AListFieldList node);
    void caseAField(AField node);
    void caseADefaultFieldsTerminatedBy(ADefaultFieldsTerminatedBy node);
    void caseACustomFieldsTerminatedBy(ACustomFieldsTerminatedBy node);
    void caseAFieldTerminator(AFieldTerminator node);
    void caseAProfileDataStatement(AProfileDataStatement node);
    void caseASingleProfiledFields(ASingleProfiledFields node);
    void caseAListProfiledFields(AListProfiledFields node);
    void caseAProfiledField(AProfiledField node);
    void caseAListProfilers(AListProfilers node);
    void caseAAllBuiltinProfilers(AAllBuiltinProfilers node);
    void caseASingleFunctionList(ASingleFunctionList node);
    void caseAListFunctionList(AListFunctionList node);
    void caseAMaxFunction(AMaxFunction node);
    void caseAMinFunction(AMinFunction node);
    void caseADistinctFunction(ADistinctFunction node);
    void caseAEmptyFunction(AEmptyFunction node);
    void caseAReqFunction(AReqFunction node);
    void caseAVarFunction(AVarFunction node);
    void caseALinFunction(ALinFunction node);
    void caseAConfFunction(AConfFunction node);
    void caseADefaultLinearity(ADefaultLinearity node);
    void caseADefaultParenLinearity(ADefaultParenLinearity node);
    void caseAParmLinearity(AParmLinearity node);
    void caseADefaultConfidence(ADefaultConfidence node);
    void caseADefaultParenConfidence(ADefaultParenConfidence node);
    void caseAParmConfidence(AParmConfidence node);
    void caseAReportDataStatement(AReportDataStatement node);
    void caseASingleReportedFields(ASingleReportedFields node);
    void caseAListReportedFields(AListReportedFields node);
    void caseAReportedField(AReportedField node);
    void caseASampleDataStatement(ASampleDataStatement node);
    void caseASampledFile(ASampledFile node);
    void caseASampleRate(ASampleRate node);
    void caseAStoreStorage(AStoreStorage node);
    void caseAExportStorage(AExportStorage node);
    void caseAStoreExportStorage(AStoreExportStorage node);
    void caseAExportStoreStorage(AExportStoreStorage node);
    void caseAHdfsFilePath(AHdfsFilePath node);
    void caseALocalFilePath(ALocalFilePath node);

    void caseTLoad(TLoad node);
    void caseTColon(TColon node);
    void caseTFieldType(TFieldType node);
    void caseTFields(TFields node);
    void caseTTerminated(TTerminated node);
    void caseTBy(TBy node);
    void caseTProfile(TProfile node);
    void caseTWith(TWith node);
    void caseTAll(TAll node);
    void caseTBuiltin(TBuiltin node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTDistinct(TDistinct node);
    void caseTEmpty(TEmpty node);
    void caseTReq(TReq node);
    void caseTVar(TVar node);
    void caseTConf(TConf node);
    void caseTLin(TLin node);
    void caseTReport(TReport node);
    void caseTFor(TFor node);
    void caseTSample(TSample node);
    void caseTAt(TAt node);
    void caseTPercent(TPercent node);
    void caseTData(TData node);
    void caseTStore(TStore node);
    void caseTInto(TInto node);
    void caseTExport(TExport node);
    void caseTTo(TTo node);
    void caseTSemicolon(TSemicolon node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTComma(TComma node);
    void caseTAs(TAs node);
    void caseTQuotedString(TQuotedString node);
    void caseTIdentifier(TIdentifier node);
    void caseTInteger(TInteger node);
    void caseTBlockComment(TBlockComment node);
    void caseTSingleLineComment(TSingleLineComment node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseEOF(EOF node);
}
