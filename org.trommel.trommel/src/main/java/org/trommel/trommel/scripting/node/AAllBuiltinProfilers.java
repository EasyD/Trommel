/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.node;

import org.trommel.trommel.scripting.analysis.*;

@SuppressWarnings("nls")
public final class AAllBuiltinProfilers extends PProfilers
{
    private TAll _all_;
    private TBuiltin _builtin_;

    public AAllBuiltinProfilers()
    {
        // Constructor
    }

    public AAllBuiltinProfilers(
         TAll _all_,
         TBuiltin _builtin_)
    {
        // Constructor
        setAll(_all_);

        setBuiltin(_builtin_);

    }

    @Override
    public Object clone()
    {
        return new AAllBuiltinProfilers(
            cloneNode(this._all_),
            cloneNode(this._builtin_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAllBuiltinProfilers(this);
    }

    public TAll getAll()
    {
        return this._all_;
    }

    public void setAll(TAll node)
    {
        if(this._all_ != null)
        {
            this._all_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._all_ = node;
    }

    public TBuiltin getBuiltin()
    {
        return this._builtin_;
    }

    public void setBuiltin(TBuiltin node)
    {
        if(this._builtin_ != null)
        {
            this._builtin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._builtin_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._all_)
            + toString(this._builtin_);
    }

    @Override
    void removeChild(Node child)
    {
        // Remove child
        if(this._all_ == child)
        {
            this._all_ = null;
            return;
        }

        if(this._builtin_ == child)
        {
            this._builtin_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(Node oldChild, Node newChild)
    {
        // Replace child
        if(this._all_ == oldChild)
        {
            setAll((TAll) newChild);
            return;
        }

        if(this._builtin_ == oldChild)
        {
            setBuiltin((TBuiltin) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
