/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.trommel.trommel.scripting.parser;

import org.trommel.trommel.scripting.lexer.*;
import org.trommel.trommel.scripting.node.*;
import org.trommel.trommel.scripting.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProfileDataTrommelScript */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AReportDataTrommelScript */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ALoadDataStatement */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce ALoadedFile */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce ALoadedFields */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce ASingleFieldList */
		    {
			ArrayList list = new5();
			push(goTo(4), list, false);
		    }
		    break;
                    case 6: /* reduce AListFieldList */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AField */
		    {
			ArrayList list = new7();
			push(goTo(5), list, false);
		    }
		    break;
                    case 8: /* reduce ADefaultFieldsTerminatedBy */
		    {
			ArrayList list = new8();
			push(goTo(6), list, false);
		    }
		    break;
                    case 9: /* reduce ACustomFieldsTerminatedBy */
		    {
			ArrayList list = new9();
			push(goTo(6), list, false);
		    }
		    break;
                    case 10: /* reduce AFieldTerminator */
		    {
			ArrayList list = new10();
			push(goTo(7), list, false);
		    }
		    break;
                    case 11: /* reduce AProfileDataStatement */
		    {
			ArrayList list = new11();
			push(goTo(8), list, false);
		    }
		    break;
                    case 12: /* reduce ASingleProfiledFields */
		    {
			ArrayList list = new12();
			push(goTo(9), list, false);
		    }
		    break;
                    case 13: /* reduce AListProfiledFields */
		    {
			ArrayList list = new13();
			push(goTo(9), list, false);
		    }
		    break;
                    case 14: /* reduce AProfiledField */
		    {
			ArrayList list = new14();
			push(goTo(10), list, false);
		    }
		    break;
                    case 15: /* reduce AListProfilers */
		    {
			ArrayList list = new15();
			push(goTo(11), list, false);
		    }
		    break;
                    case 16: /* reduce AAllBuiltinProfilers */
		    {
			ArrayList list = new16();
			push(goTo(11), list, false);
		    }
		    break;
                    case 17: /* reduce ASingleFunctionList */
		    {
			ArrayList list = new17();
			push(goTo(12), list, false);
		    }
		    break;
                    case 18: /* reduce AListFunctionList */
		    {
			ArrayList list = new18();
			push(goTo(12), list, false);
		    }
		    break;
                    case 19: /* reduce AMaxFunction */
		    {
			ArrayList list = new19();
			push(goTo(13), list, false);
		    }
		    break;
                    case 20: /* reduce AMinFunction */
		    {
			ArrayList list = new20();
			push(goTo(13), list, false);
		    }
		    break;
                    case 21: /* reduce ADistinctFunction */
		    {
			ArrayList list = new21();
			push(goTo(13), list, false);
		    }
		    break;
                    case 22: /* reduce AEmptyFunction */
		    {
			ArrayList list = new22();
			push(goTo(13), list, false);
		    }
		    break;
                    case 23: /* reduce AReqFunction */
		    {
			ArrayList list = new23();
			push(goTo(13), list, false);
		    }
		    break;
                    case 24: /* reduce AVarFunction */
		    {
			ArrayList list = new24();
			push(goTo(13), list, false);
		    }
		    break;
                    case 25: /* reduce ALinFunction */
		    {
			ArrayList list = new25();
			push(goTo(13), list, false);
		    }
		    break;
                    case 26: /* reduce AConfFunction */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce ADefaultLinearity */
		    {
			ArrayList list = new27();
			push(goTo(14), list, false);
		    }
		    break;
                    case 28: /* reduce ADefaultParenLinearity */
		    {
			ArrayList list = new28();
			push(goTo(14), list, false);
		    }
		    break;
                    case 29: /* reduce AParmLinearity */
		    {
			ArrayList list = new29();
			push(goTo(14), list, false);
		    }
		    break;
                    case 30: /* reduce ADefaultConfidence */
		    {
			ArrayList list = new30();
			push(goTo(15), list, false);
		    }
		    break;
                    case 31: /* reduce ADefaultParenConfidence */
		    {
			ArrayList list = new31();
			push(goTo(15), list, false);
		    }
		    break;
                    case 32: /* reduce AParmConfidence */
		    {
			ArrayList list = new32();
			push(goTo(15), list, false);
		    }
		    break;
                    case 33: /* reduce AHdfsFilePath */
		    {
			ArrayList list = new33();
			push(goTo(16), list, false);
		    }
		    break;
                    case 34: /* reduce AHdfsFile */
		    {
			ArrayList list = new34();
			push(goTo(17), list, false);
		    }
		    break;
                    case 35: /* reduce ALocalFilePath */
		    {
			ArrayList list = new35();
			push(goTo(18), list, false);
		    }
		    break;
                    case 36: /* reduce ALocalFile */
		    {
			ArrayList list = new36();
			push(goTo(19), list, false);
		    }
		    break;
                    case 37: /* reduce AReportDataStatement */
		    {
			ArrayList list = new37();
			push(goTo(20), list, false);
		    }
		    break;
                    case 38: /* reduce ASingleReportedFields */
		    {
			ArrayList list = new38();
			push(goTo(21), list, false);
		    }
		    break;
                    case 39: /* reduce AListReportedFields */
		    {
			ArrayList list = new39();
			push(goTo(21), list, false);
		    }
		    break;
                    case 40: /* reduce AReportedField */
		    {
			ArrayList list = new40();
			push(goTo(22), list, false);
		    }
		    break;
                    case 41: /* reduce AStoreStorage */
		    {
			ArrayList list = new41();
			push(goTo(23), list, false);
		    }
		    break;
                    case 42: /* reduce AExportStorage */
		    {
			ArrayList list = new42();
			push(goTo(23), list, false);
		    }
		    break;
                    case 43: /* reduce AStoreExportStorage */
		    {
			ArrayList list = new43();
			push(goTo(23), list, false);
		    }
		    break;
                    case 44: /* reduce AExportStoreStorage */
		    {
			ArrayList list = new44();
			push(goTo(23), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTrommelScript node1 = (PTrommelScript) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProfileDataTrommelScript */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrommelScript ptrommelscriptNode1;
        {
            // Block
        PLoadDataStatement ploaddatastatementNode2;
        PProfileDataStatement pprofiledatastatementNode3;
        ploaddatastatementNode2 = (PLoadDataStatement)nodeArrayList1.get(0);
        pprofiledatastatementNode3 = (PProfileDataStatement)nodeArrayList2.get(0);

        ptrommelscriptNode1 = new AProfileDataTrommelScript(ploaddatastatementNode2, pprofiledatastatementNode3);
        }
	nodeList.add(ptrommelscriptNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AReportDataTrommelScript */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrommelScript ptrommelscriptNode1;
        {
            // Block
        PLoadDataStatement ploaddatastatementNode2;
        PReportDataStatement preportdatastatementNode3;
        ploaddatastatementNode2 = (PLoadDataStatement)nodeArrayList1.get(0);
        preportdatastatementNode3 = (PReportDataStatement)nodeArrayList2.get(0);

        ptrommelscriptNode1 = new AReportDataTrommelScript(ploaddatastatementNode2, preportdatastatementNode3);
        }
	nodeList.add(ptrommelscriptNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ALoadDataStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLoadDataStatement ploaddatastatementNode1;
        {
            // Block
        TLoad tloadNode2;
        TData tdataNode3;
        PLoadedFile ploadedfileNode4;
        TAs tasNode5;
        PLoadedFields ploadedfieldsNode6;
        PFieldsTerminatedBy pfieldsterminatedbyNode7;
        tloadNode2 = (TLoad)nodeArrayList1.get(0);
        tdataNode3 = (TData)nodeArrayList2.get(0);
        ploadedfileNode4 = (PLoadedFile)nodeArrayList3.get(0);
        tasNode5 = (TAs)nodeArrayList4.get(0);
        ploadedfieldsNode6 = (PLoadedFields)nodeArrayList5.get(0);
        pfieldsterminatedbyNode7 = (PFieldsTerminatedBy)nodeArrayList6.get(0);

        ploaddatastatementNode1 = new ALoadDataStatement(tloadNode2, tdataNode3, ploadedfileNode4, tasNode5, ploadedfieldsNode6, pfieldsterminatedbyNode7);
        }
	nodeList.add(ploaddatastatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ALoadedFile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLoadedFile ploadedfileNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        ploadedfileNode1 = new ALoadedFile(tquotedstringNode2);
        }
	nodeList.add(ploadedfileNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ALoadedFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLoadedFields ploadedfieldsNode1;
        {
            // Block
        TLeftParen tleftparenNode2;
        PFieldList pfieldlistNode3;
        TRightParen trightparenNode4;
        tleftparenNode2 = (TLeftParen)nodeArrayList1.get(0);
        pfieldlistNode3 = (PFieldList)nodeArrayList2.get(0);
        trightparenNode4 = (TRightParen)nodeArrayList3.get(0);

        ploadedfieldsNode1 = new ALoadedFields(tleftparenNode2, pfieldlistNode3, trightparenNode4);
        }
	nodeList.add(ploadedfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASingleFieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldList pfieldlistNode1;
        {
            // Block
        PField pfieldNode2;
        pfieldNode2 = (PField)nodeArrayList1.get(0);

        pfieldlistNode1 = new ASingleFieldList(pfieldNode2);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AListFieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldList pfieldlistNode1;
        {
            // Block
        PFieldList pfieldlistNode2;
        TComma tcommaNode3;
        PField pfieldNode4;
        pfieldlistNode2 = (PFieldList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pfieldNode4 = (PField)nodeArrayList3.get(0);

        pfieldlistNode1 = new AListFieldList(pfieldlistNode2, tcommaNode3, pfieldNode4);
        }
	nodeList.add(pfieldlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        TFieldType tfieldtypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        tfieldtypeNode4 = (TFieldType)nodeArrayList3.get(0);

        pfieldNode1 = new AField(tidentifierNode2, tcolonNode3, tfieldtypeNode4);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ADefaultFieldsTerminatedBy */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldsTerminatedBy pfieldsterminatedbyNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pfieldsterminatedbyNode1 = new ADefaultFieldsTerminatedBy(tsemicolonNode2);
        }
	nodeList.add(pfieldsterminatedbyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ACustomFieldsTerminatedBy */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldsTerminatedBy pfieldsterminatedbyNode1;
        {
            // Block
        TFields tfieldsNode2;
        TTerminated tterminatedNode3;
        TBy tbyNode4;
        PFieldTerminator pfieldterminatorNode5;
        TSemicolon tsemicolonNode6;
        tfieldsNode2 = (TFields)nodeArrayList1.get(0);
        tterminatedNode3 = (TTerminated)nodeArrayList2.get(0);
        tbyNode4 = (TBy)nodeArrayList3.get(0);
        pfieldterminatorNode5 = (PFieldTerminator)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pfieldsterminatedbyNode1 = new ACustomFieldsTerminatedBy(tfieldsNode2, tterminatedNode3, tbyNode4, pfieldterminatorNode5, tsemicolonNode6);
        }
	nodeList.add(pfieldsterminatedbyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AFieldTerminator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFieldTerminator pfieldterminatorNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        pfieldterminatorNode1 = new AFieldTerminator(tquotedstringNode2);
        }
	nodeList.add(pfieldterminatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AProfileDataStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfileDataStatement pprofiledatastatementNode1;
        {
            // Block
        TProfile tprofileNode2;
        PProfiledFields pprofiledfieldsNode3;
        TWith twithNode4;
        PProfilers pprofilersNode5;
        PStorage pstorageNode6;
        TSemicolon tsemicolonNode7;
        tprofileNode2 = (TProfile)nodeArrayList1.get(0);
        pprofiledfieldsNode3 = (PProfiledFields)nodeArrayList2.get(0);
        twithNode4 = (TWith)nodeArrayList3.get(0);
        pprofilersNode5 = (PProfilers)nodeArrayList4.get(0);
        pstorageNode6 = (PStorage)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pprofiledatastatementNode1 = new AProfileDataStatement(tprofileNode2, pprofiledfieldsNode3, twithNode4, pprofilersNode5, pstorageNode6, tsemicolonNode7);
        }
	nodeList.add(pprofiledatastatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ASingleProfiledFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfiledFields pprofiledfieldsNode1;
        {
            // Block
        PProfiledField pprofiledfieldNode2;
        pprofiledfieldNode2 = (PProfiledField)nodeArrayList1.get(0);

        pprofiledfieldsNode1 = new ASingleProfiledFields(pprofiledfieldNode2);
        }
	nodeList.add(pprofiledfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AListProfiledFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfiledFields pprofiledfieldsNode1;
        {
            // Block
        PProfiledFields pprofiledfieldsNode2;
        TComma tcommaNode3;
        PProfiledField pprofiledfieldNode4;
        pprofiledfieldsNode2 = (PProfiledFields)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pprofiledfieldNode4 = (PProfiledField)nodeArrayList3.get(0);

        pprofiledfieldsNode1 = new AListProfiledFields(pprofiledfieldsNode2, tcommaNode3, pprofiledfieldNode4);
        }
	nodeList.add(pprofiledfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AProfiledField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfiledField pprofiledfieldNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pprofiledfieldNode1 = new AProfiledField(tidentifierNode2);
        }
	nodeList.add(pprofiledfieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AListProfilers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfilers pprofilersNode1;
        {
            // Block
        PFunctionList pfunctionlistNode2;
        pfunctionlistNode2 = (PFunctionList)nodeArrayList1.get(0);

        pprofilersNode1 = new AListProfilers(pfunctionlistNode2);
        }
	nodeList.add(pprofilersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAllBuiltinProfilers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProfilers pprofilersNode1;
        {
            // Block
        TAll tallNode2;
        TBuiltin tbuiltinNode3;
        tallNode2 = (TAll)nodeArrayList1.get(0);
        tbuiltinNode3 = (TBuiltin)nodeArrayList2.get(0);

        pprofilersNode1 = new AAllBuiltinProfilers(tallNode2, tbuiltinNode3);
        }
	nodeList.add(pprofilersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ASingleFunctionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionList pfunctionlistNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pfunctionlistNode1 = new ASingleFunctionList(pfunctionNode2);
        }
	nodeList.add(pfunctionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AListFunctionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionList pfunctionlistNode1;
        {
            // Block
        PFunctionList pfunctionlistNode2;
        TComma tcommaNode3;
        PFunction pfunctionNode4;
        pfunctionlistNode2 = (PFunctionList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pfunctionNode4 = (PFunction)nodeArrayList3.get(0);

        pfunctionlistNode1 = new AListFunctionList(pfunctionlistNode2, tcommaNode3, pfunctionNode4);
        }
	nodeList.add(pfunctionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AMaxFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TMax tmaxNode2;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);

        pfunctionNode1 = new AMaxFunction(tmaxNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AMinFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TMin tminNode2;
        tminNode2 = (TMin)nodeArrayList1.get(0);

        pfunctionNode1 = new AMinFunction(tminNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ADistinctFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TDistinct tdistinctNode2;
        tdistinctNode2 = (TDistinct)nodeArrayList1.get(0);

        pfunctionNode1 = new ADistinctFunction(tdistinctNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AEmptyFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TEmpty temptyNode2;
        temptyNode2 = (TEmpty)nodeArrayList1.get(0);

        pfunctionNode1 = new AEmptyFunction(temptyNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AReqFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TReq treqNode2;
        treqNode2 = (TReq)nodeArrayList1.get(0);

        pfunctionNode1 = new AReqFunction(treqNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AVarFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TVar tvarNode2;
        tvarNode2 = (TVar)nodeArrayList1.get(0);

        pfunctionNode1 = new AVarFunction(tvarNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ALinFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PLinearity plinearityNode2;
        plinearityNode2 = (PLinearity)nodeArrayList1.get(0);

        pfunctionNode1 = new ALinFunction(plinearityNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AConfFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PConfidence pconfidenceNode2;
        pconfidenceNode2 = (PConfidence)nodeArrayList1.get(0);

        pfunctionNode1 = new AConfFunction(pconfidenceNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ADefaultLinearity */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLinearity plinearityNode1;
        {
            // Block
        TLin tlinNode2;
        tlinNode2 = (TLin)nodeArrayList1.get(0);

        plinearityNode1 = new ADefaultLinearity(tlinNode2);
        }
	nodeList.add(plinearityNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ADefaultParenLinearity */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLinearity plinearityNode1;
        {
            // Block
        TLin tlinNode2;
        TLeftParen tleftparenNode3;
        TRightParen trightparenNode4;
        tlinNode2 = (TLin)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode4 = (TRightParen)nodeArrayList3.get(0);

        plinearityNode1 = new ADefaultParenLinearity(tlinNode2, tleftparenNode3, trightparenNode4);
        }
	nodeList.add(plinearityNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AParmLinearity */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLinearity plinearityNode1;
        {
            // Block
        TLin tlinNode2;
        TLeftParen tleftparenNode3;
        TInteger tintegerNode4;
        TRightParen trightparenNode5;
        tlinNode2 = (TLin)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        tintegerNode4 = (TInteger)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);

        plinearityNode1 = new AParmLinearity(tlinNode2, tleftparenNode3, tintegerNode4, trightparenNode5);
        }
	nodeList.add(plinearityNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ADefaultConfidence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfidence pconfidenceNode1;
        {
            // Block
        TConf tconfNode2;
        tconfNode2 = (TConf)nodeArrayList1.get(0);

        pconfidenceNode1 = new ADefaultConfidence(tconfNode2);
        }
	nodeList.add(pconfidenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ADefaultParenConfidence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfidence pconfidenceNode1;
        {
            // Block
        TConf tconfNode2;
        TLeftParen tleftparenNode3;
        TRightParen trightparenNode4;
        tconfNode2 = (TConf)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode4 = (TRightParen)nodeArrayList3.get(0);

        pconfidenceNode1 = new ADefaultParenConfidence(tconfNode2, tleftparenNode3, trightparenNode4);
        }
	nodeList.add(pconfidenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AParmConfidence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfidence pconfidenceNode1;
        {
            // Block
        TConf tconfNode2;
        TLeftParen tleftparenNode3;
        TInteger tintegerNode4;
        TRightParen trightparenNode5;
        tconfNode2 = (TConf)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        tintegerNode4 = (TInteger)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);

        pconfidenceNode1 = new AParmConfidence(tconfNode2, tleftparenNode3, tintegerNode4, trightparenNode5);
        }
	nodeList.add(pconfidenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AHdfsFilePath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHdfsFilePath phdfsfilepathNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        phdfsfilepathNode1 = new AHdfsFilePath(tquotedstringNode2);
        }
	nodeList.add(phdfsfilepathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AHdfsFile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHdfsFile phdfsfileNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        phdfsfileNode1 = new AHdfsFile(tquotedstringNode2);
        }
	nodeList.add(phdfsfileNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ALocalFilePath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalFilePath plocalfilepathNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        plocalfilepathNode1 = new ALocalFilePath(tquotedstringNode2);
        }
	nodeList.add(plocalfilepathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ALocalFile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalFile plocalfileNode1;
        {
            // Block
        TQuotedString tquotedstringNode2;
        tquotedstringNode2 = (TQuotedString)nodeArrayList1.get(0);

        plocalfileNode1 = new ALocalFile(tquotedstringNode2);
        }
	nodeList.add(plocalfileNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AReportDataStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReportDataStatement preportdatastatementNode1;
        {
            // Block
        TReport treportNode2;
        TData tdataNode3;
        TFor tforNode4;
        PReportedFields preportedfieldsNode5;
        PStorage pstorageNode6;
        TSemicolon tsemicolonNode7;
        treportNode2 = (TReport)nodeArrayList1.get(0);
        tdataNode3 = (TData)nodeArrayList2.get(0);
        tforNode4 = (TFor)nodeArrayList3.get(0);
        preportedfieldsNode5 = (PReportedFields)nodeArrayList4.get(0);
        pstorageNode6 = (PStorage)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        preportdatastatementNode1 = new AReportDataStatement(treportNode2, tdataNode3, tforNode4, preportedfieldsNode5, pstorageNode6, tsemicolonNode7);
        }
	nodeList.add(preportdatastatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ASingleReportedFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReportedFields preportedfieldsNode1;
        {
            // Block
        PReportedField preportedfieldNode2;
        preportedfieldNode2 = (PReportedField)nodeArrayList1.get(0);

        preportedfieldsNode1 = new ASingleReportedFields(preportedfieldNode2);
        }
	nodeList.add(preportedfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AListReportedFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReportedFields preportedfieldsNode1;
        {
            // Block
        PReportedFields preportedfieldsNode2;
        TComma tcommaNode3;
        PReportedField preportedfieldNode4;
        preportedfieldsNode2 = (PReportedFields)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        preportedfieldNode4 = (PReportedField)nodeArrayList3.get(0);

        preportedfieldsNode1 = new AListReportedFields(preportedfieldsNode2, tcommaNode3, preportedfieldNode4);
        }
	nodeList.add(preportedfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AReportedField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReportedField preportedfieldNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        preportedfieldNode1 = new AReportedField(tidentifierNode2);
        }
	nodeList.add(preportedfieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AStoreStorage */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStorage pstorageNode1;
        {
            // Block
        TStore tstoreNode2;
        TInto tintoNode3;
        PHdfsFilePath phdfsfilepathNode4;
        TAs tasNode5;
        PHdfsFile phdfsfileNode6;
        tstoreNode2 = (TStore)nodeArrayList1.get(0);
        tintoNode3 = (TInto)nodeArrayList2.get(0);
        phdfsfilepathNode4 = (PHdfsFilePath)nodeArrayList3.get(0);
        tasNode5 = (TAs)nodeArrayList4.get(0);
        phdfsfileNode6 = (PHdfsFile)nodeArrayList5.get(0);

        pstorageNode1 = new AStoreStorage(tstoreNode2, tintoNode3, phdfsfilepathNode4, tasNode5, phdfsfileNode6);
        }
	nodeList.add(pstorageNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AExportStorage */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStorage pstorageNode1;
        {
            // Block
        TExport texportNode2;
        TTo ttoNode3;
        PLocalFilePath plocalfilepathNode4;
        TAs tasNode5;
        PLocalFile plocalfileNode6;
        texportNode2 = (TExport)nodeArrayList1.get(0);
        ttoNode3 = (TTo)nodeArrayList2.get(0);
        plocalfilepathNode4 = (PLocalFilePath)nodeArrayList3.get(0);
        tasNode5 = (TAs)nodeArrayList4.get(0);
        plocalfileNode6 = (PLocalFile)nodeArrayList5.get(0);

        pstorageNode1 = new AExportStorage(texportNode2, ttoNode3, plocalfilepathNode4, tasNode5, plocalfileNode6);
        }
	nodeList.add(pstorageNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AStoreExportStorage */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStorage pstorageNode1;
        {
            // Block
        TStore tstoreNode2;
        TInto tintoNode3;
        PHdfsFilePath phdfsfilepathNode4;
        TAs tasNode5;
        PHdfsFile phdfsfileNode6;
        TExport texportNode7;
        TTo ttoNode8;
        PLocalFilePath plocalfilepathNode9;
        TAs tasNode10;
        PLocalFile plocalfileNode11;
        tstoreNode2 = (TStore)nodeArrayList1.get(0);
        tintoNode3 = (TInto)nodeArrayList2.get(0);
        phdfsfilepathNode4 = (PHdfsFilePath)nodeArrayList3.get(0);
        tasNode5 = (TAs)nodeArrayList4.get(0);
        phdfsfileNode6 = (PHdfsFile)nodeArrayList5.get(0);
        texportNode7 = (TExport)nodeArrayList6.get(0);
        ttoNode8 = (TTo)nodeArrayList7.get(0);
        plocalfilepathNode9 = (PLocalFilePath)nodeArrayList8.get(0);
        tasNode10 = (TAs)nodeArrayList9.get(0);
        plocalfileNode11 = (PLocalFile)nodeArrayList10.get(0);

        pstorageNode1 = new AStoreExportStorage(tstoreNode2, tintoNode3, phdfsfilepathNode4, tasNode5, phdfsfileNode6, texportNode7, ttoNode8, plocalfilepathNode9, tasNode10, plocalfileNode11);
        }
	nodeList.add(pstorageNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AExportStoreStorage */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStorage pstorageNode1;
        {
            // Block
        TExport texportNode2;
        TTo ttoNode3;
        PLocalFilePath plocalfilepathNode4;
        TAs tasNode5;
        PLocalFile plocalfileNode6;
        TStore tstoreNode7;
        TInto tintoNode8;
        PHdfsFilePath phdfsfilepathNode9;
        TAs tasNode10;
        PHdfsFile phdfsfileNode11;
        texportNode2 = (TExport)nodeArrayList1.get(0);
        ttoNode3 = (TTo)nodeArrayList2.get(0);
        plocalfilepathNode4 = (PLocalFilePath)nodeArrayList3.get(0);
        tasNode5 = (TAs)nodeArrayList4.get(0);
        plocalfileNode6 = (PLocalFile)nodeArrayList5.get(0);
        tstoreNode7 = (TStore)nodeArrayList6.get(0);
        tintoNode8 = (TInto)nodeArrayList7.get(0);
        phdfsfilepathNode9 = (PHdfsFilePath)nodeArrayList8.get(0);
        tasNode10 = (TAs)nodeArrayList9.get(0);
        phdfsfileNode11 = (PHdfsFile)nodeArrayList10.get(0);

        pstorageNode1 = new AExportStoreStorage(texportNode2, ttoNode3, plocalfilepathNode4, tasNode5, plocalfileNode6, tstoreNode7, tintoNode8, phdfsfilepathNode9, tasNode10, phdfsfileNode11);
        }
	nodeList.add(pstorageNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {20, SHIFT, 4}, },
			{{-1, ERROR, 2}, {33, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {6, SHIFT, 5}, {18, SHIFT, 6}, },
			{{-1, ERROR, 4}, {30, SHIFT, 9}, },
			{{-1, ERROR, 5}, {31, SHIFT, 11}, },
			{{-1, ERROR, 6}, {20, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 10}, {29, SHIFT, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 12}, {7, SHIFT, 16}, {28, SHIFT, 17}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 14}, {19, SHIFT, 18}, },
			{{-1, ERROR, 15}, {26, SHIFT, 19}, },
			{{-1, ERROR, 16}, {8, SHIFT, 21}, {10, SHIFT, 22}, {11, SHIFT, 23}, {12, SHIFT, 24}, {13, SHIFT, 25}, {14, SHIFT, 26}, {15, SHIFT, 27}, {16, SHIFT, 28}, {17, SHIFT, 29}, },
			{{-1, ERROR, 17}, {31, SHIFT, 11}, },
			{{-1, ERROR, 18}, {31, SHIFT, 36}, },
			{{-1, ERROR, 19}, {31, SHIFT, 39}, },
			{{-1, ERROR, 20}, {3, SHIFT, 42}, {25, SHIFT, 43}, },
			{{-1, ERROR, 21}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 30}, {26, SHIFT, 46}, },
			{{-1, REDUCE, 27}, {26, SHIFT, 47}, },
			{{-1, ERROR, 30}, {21, SHIFT, 48}, {23, SHIFT, 49}, },
			{{-1, REDUCE, 15}, {28, SHIFT, 51}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 37}, {21, SHIFT, 48}, {23, SHIFT, 49}, {28, SHIFT, 52}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 39}, {1, SHIFT, 54}, },
			{{-1, ERROR, 40}, {27, SHIFT, 55}, {28, SHIFT, 56}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 42}, {4, SHIFT, 57}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 46}, {27, SHIFT, 58}, {32, SHIFT, 59}, },
			{{-1, ERROR, 47}, {27, SHIFT, 60}, {32, SHIFT, 61}, },
			{{-1, ERROR, 48}, {22, SHIFT, 62}, },
			{{-1, ERROR, 49}, {24, SHIFT, 63}, },
			{{-1, ERROR, 50}, {25, SHIFT, 64}, },
			{{-1, ERROR, 51}, {10, SHIFT, 22}, {11, SHIFT, 23}, {12, SHIFT, 24}, {13, SHIFT, 25}, {14, SHIFT, 26}, {15, SHIFT, 27}, {16, SHIFT, 28}, {17, SHIFT, 29}, },
			{{-1, ERROR, 52}, {31, SHIFT, 36}, },
			{{-1, ERROR, 53}, {25, SHIFT, 67}, },
			{{-1, ERROR, 54}, {2, SHIFT, 68}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 56}, {31, SHIFT, 39}, },
			{{-1, ERROR, 57}, {5, SHIFT, 70}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 59}, {27, SHIFT, 71}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 61}, {27, SHIFT, 72}, },
			{{-1, ERROR, 62}, {30, SHIFT, 73}, },
			{{-1, ERROR, 63}, {30, SHIFT, 75}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 70}, {30, SHIFT, 77}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 74}, {29, SHIFT, 79}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 76}, {29, SHIFT, 80}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 78}, {25, SHIFT, 81}, },
			{{-1, ERROR, 79}, {30, SHIFT, 82}, },
			{{-1, ERROR, 80}, {30, SHIFT, 84}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 41}, {23, SHIFT, 86}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 42}, {21, SHIFT, 87}, },
			{{-1, ERROR, 86}, {24, SHIFT, 88}, },
			{{-1, ERROR, 87}, {22, SHIFT, 89}, },
			{{-1, ERROR, 88}, {30, SHIFT, 75}, },
			{{-1, ERROR, 89}, {30, SHIFT, 73}, },
			{{-1, ERROR, 90}, {29, SHIFT, 92}, },
			{{-1, ERROR, 91}, {29, SHIFT, 93}, },
			{{-1, ERROR, 92}, {30, SHIFT, 84}, },
			{{-1, ERROR, 93}, {30, SHIFT, 82}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 10}, },
			{{-1, 20}, },
			{{-1, 40}, },
			{{-1, 41}, {56, 69}, },
			{{-1, 44}, },
			{{-1, 78}, },
			{{-1, 7}, },
			{{-1, 12}, },
			{{-1, 13}, {17, 35}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 32}, {51, 65}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 74}, {89, 91}, },
			{{-1, 83}, {93, 95}, },
			{{-1, 76}, {88, 90}, },
			{{-1, 85}, {92, 94}, },
			{{-1, 8}, },
			{{-1, 37}, },
			{{-1, 38}, {52, 66}, },
			{{-1, 50}, {37, 53}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: load",
			"expecting: data",
			"expecting: EOF",
			"expecting: profile, report",
			"expecting: quoted string",
			"expecting: identifier",
			"expecting: as",
			"expecting: with, ','",
			"expecting: for",
			"expecting: '('",
			"expecting: all, max, min, distinct, empty, req, var, conf, lin",
			"expecting: fields, ';'",
			"expecting: builtin",
			"expecting: store, export, ','",
			"expecting: store, export, '(', ','",
			"expecting: store, export",
			"expecting: ':'",
			"expecting: ')', ','",
			"expecting: terminated",
			"expecting: ')', integer",
			"expecting: into",
			"expecting: to",
			"expecting: ';'",
			"expecting: max, min, distinct, empty, req, var, conf, lin",
			"expecting: field type",
			"expecting: by",
			"expecting: ')'",
			"expecting: export, ';'",
			"expecting: store, ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 2, 2, 6, 6, 7, 7, 7, 8, 9, 10, 5, 5, 5, 11, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 13, 13, 13, 13, 7, 13, 13, 13, 16, 17, 17, 18, 3, 3, 15, 19, 19, 20, 21, 22, 23, 5, 22, 24, 11, 5, 25, 13, 26, 13, 26, 4, 4, 2, 13, 13, 2, 17, 17, 4, 13, 13, 6, 6, 6, 6, 22, 22, 4, 4, 3, 27, 27, 28, 28, 21, 20, 4, 4, 6, 6, 4, 4, 22, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
